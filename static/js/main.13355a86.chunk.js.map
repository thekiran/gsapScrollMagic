{"version":3,"sources":["utils/chatSocketServer.js","utils/chatHttpServer.js","pages/home/chat-list/ChatList.js","pages/home/conversation/Conversation.js","pages/home/Home.js","pages/newHome/login/Login.js","pages/newHome/registration/Registration.js","pages/newHome/Landing.js","pages/newHome/NewHome.js","App.js","pages/not-found/NotFound.js","serviceWorker.js","index.js"],"names":["events","require","chatSocketServer","socket","eventEmitter","EventEmitter","userId","this","io","query","concat","error","alert","_this","emit","on","data","message","_this2","_this3","chatHttpServer","Promise","resolve","reject","localStorage","getItem","removeItem","key","value","setItem","userCredential","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","axios","sent","t0","stop","_x","_x2","apply","arguments","username","_ref2","_callee2","_context2","_x3","_x4","_ref3","_callee3","_context3","_x5","_x6","_ref4","_callee4","_context4","_x7","_x8","toUserId","_ref5","_callee5","_context5","_x9","_x10","ChatList","props","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","createChatListUsers","chatListResponse","chatListUsers","state","singleUser","length","filter","obj","id","chatList","toConsumableArray","userDisconnected","loggedOutUser","findIndex","userid","online","setState","loading","selectedUser","user","selectedUserId","updateSelectedUser","ChatSocketServer","getChatList","removeListener","react_default","createElement","Fragment","className","map","index","onClick","Component","Conversation","receiveSocketMessages","socketResponse","fromUserId","conversations","scrollMessageContainer","getMessages","_this$props","newSelectedUser","messageResponse","ChatHttpServer","messages","messageLoading","sendMessage","event","target","_this$props2","undefined","router","navigate","sendAndUpdateMessages","trim","messageContainer","React","createRef","receiveMessage","prevProps","current","setTimeout","scrollTop","scrollHeight","console","warn","ref","conversation","alignMessages","_this$state","getMessageUI","getInitiateConversationUI","placeholder","onKeyPress","Home","isOverlayVisible","logout","removeLS","loggedOut","history","push","log","setRenderLoadingState","loadingState","getChatBoxComponent","home_conversation_Conversation","getUserId","userSessionCheck","setLS","establishSocketConnection","home_chat_list_ChatList","href","role","getChatListComponent","withRouter","Login","handleLogin","preventDefault","login","handleInputChange","defineProperty","name","password","Form","Group","controlId","Control","type","onChange","Button","variant","Registration","handleRegistration","register","checkUsernameAvailability","usernameAvailable","react_debounce_input_lib","minLength","debounceTimeout","Alert","username-availability-warning","visibility-hidden","Landing","class","style","height","NewHome","newHome_Landing","Tabs","defaultActiveKey","Tab","eventKey","title","newHome_login_Login","newHome_registration_Registration","App","body","document","querySelector","vendor","async","src","appendChild","gsap","scrollTrigger","lottie","scrollLottie","registerPlugin","newHome_NewHome","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13355a86.chunk.js","sourcesContent":["import * as io from 'socket.io-client';\nconst events = require('events');\n\n\nclass ChatSocketServer {\n    \n    socket = null\n    eventEmitter = new events.EventEmitter();\n\n    // Connecting to Socket Server\n    establishSocketConnection(userId) {\n        try {\n            this.socket = io(`http://localhost:4000`, {\n                query: `userId=${userId}`\n            });\n        } catch (error) {\n            alert(`Something went wrong; Can't connect to socket server`);\n        }\n    }\n\n    getChatList(userId) {\n        this.socket.emit('chat-list', {\n            userId: userId\n        });\n        this.socket.on('chat-list-response', (data) => {\n            this.eventEmitter.emit('chat-list-response', data);\n        });\n    }\n\n    sendMessage(message) {\n        this.socket.emit('add-message', message);\n    }\n\n    receiveMessage() {\n        this.socket.on('add-message-response', (data) => {\n            this.eventEmitter.emit('add-message-response', data);\n        });\n    }\n\n    logout(userId) {\n        this.socket.emit('logout', userId);\n        this.socket.on('logout-response', (data) => {\n            this.eventEmitter.emit('logout-response', data);\n        });\n    }\n\n}\n\nexport default new ChatSocketServer()","import * as axios from 'axios';\n \nclass ChatHttpServer {\n\n    getUserId() {\n        return new Promise((resolve, reject) => {\n            try {\n                resolve(localStorage.getItem('userid'));\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    removeLS() {\n        return new Promise((resolve, reject) => {\n            try {\n                localStorage.removeItem('userid');\n                localStorage.removeItem('username');\n                resolve(true);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    setLS(key, value) {\n        return new Promise((resolve, reject) => {\n            try {\n                localStorage.setItem(key, value);\n                resolve(true);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    login(userCredential) {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const response = await axios.post('http://localhost:4000/login', userCredential);\n                resolve(response.data);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    checkUsernameAvailability(username) {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const response = await axios.post('http://localhost:4000/usernameAvailable', {\n                    username: username\n                });\n                resolve(response.data);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n    \n    register(userCredential) {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const response = await axios.post('http://localhost:4000/register', userCredential);\n                resolve(response.data);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    userSessionCheck(userId) {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const response = await axios.post('http://localhost:4000/userSessionCheck', {\n                    userId: userId\n                });\n                resolve(response.data);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    getMessages(userId, toUserId) {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const response = await axios.post('http://localhost:4000/getMessages', {\n                    userId: userId,\n                    toUserId: toUserId\n                });\n                resolve(response.data);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n    \n}\n\nexport default new ChatHttpServer();","import React, { Component } from 'react';\n\nimport ChatSocketServer from '../../../utils/chatSocketServer';\nimport \"./ChatList.css\";\n\nclass ChatList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      selectedUserId: null,\n      chatListUsers: []\n    }\n  }\n\n  componentDidMount() {\n    const userId = this.props.userId;\n    ChatSocketServer.getChatList(userId);\n    ChatSocketServer.eventEmitter.on('chat-list-response', this.createChatListUsers);\n  }\n\n  componentWillUnmount() {\n    ChatSocketServer.eventEmitter.removeListener('chat-list-response', this.createChatListUsers);\n  }\n\n  createChatListUsers = (chatListResponse) => {    \n    if (!chatListResponse.error) {\n      let chatListUsers = this.state.chatListUsers;\n      if (chatListResponse.singleUser) {\n        if (chatListUsers.length > 0) {\n          chatListUsers = chatListUsers.filter(function (obj) {\n            return obj.id !== chatListResponse.chatList[0].id;\n          });\n        }\n        /* Adding new online user into chat list array */\n        chatListUsers = [...chatListUsers, ...chatListResponse.chatList];\n      } else if (chatListResponse.userDisconnected) {\n        const loggedOutUser = chatListUsers.findIndex((obj) => obj.id === chatListResponse.userid);\n        if (loggedOutUser >= 0) {\n          chatListUsers[loggedOutUser].online = 'N';\n        }\n      } else {\n        /* Updating entire chat list if user logs in. */\n        chatListUsers = chatListResponse.chatList;\n      }\n      this.setState({\n        chatListUsers: chatListUsers\n      });\n    } else {\n      alert(`Unable to load Chat list, Redirecting to Login.`);\n    }\n    this.setState({\n      loading: false\n    });\n  }\n\n  selectedUser = (user) => {\n    this.setState({\n      selectedUserId: user.id\n    });\n    this.props.updateSelectedUser(user)\n  }\n\n  render() {\n    return (\n      <>\n        <ul className={`user-list ${this.state.chatListUsers.length === 0 ? 'visibility-hidden' : ''}`} >\n          {\n            this.state.chatListUsers.map( (user, index) => \n              <li \n                key={index} \n                className={this.state.selectedUserId === user.id ? 'active' : ''}\n                onClick={() => this.selectedUser(user)}\n              >\n                {user.username}\n                <span className={user.online === 'Y' ? 'online' : 'offline'}></span>\n              </li>\n            )\n          }\n        </ul>\n        <div className={`alert \n          ${this.state.loading ? 'alert-info' : ''} \n          ${this.state.chatListUsers.length > 0 ? 'visibility-hidden' : ''}`\n        }>\n          { this.state.loading|| this.state.chatListUsers.length.length === 0 ? 'Loading your chat list.' : 'No User Available to chat.'}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ChatList;\n","import React, { Component } from 'react';\n\nimport ChatHttpServer from '../../../utils/chatHttpServer';\nimport ChatSocketServer from '../../../utils/chatSocketServer';\n\nimport './Conversation.css';\n\nclass Conversation extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      messageLoading: true,\n      conversations: [],\n      selectedUser: null\n    }\n    this.messageContainer = React.createRef();\n  }\n\n  componentDidMount() {\n    ChatSocketServer.receiveMessage();\n    ChatSocketServer.eventEmitter.on('add-message-response', this.receiveSocketMessages);\n  }\n\n  componentWillUnmount() {\n    ChatSocketServer.eventEmitter.removeListener('add-message-response', this.receiveSocketMessages);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.newSelectedUser === null || (this.props.newSelectedUser.id !== prevProps.newSelectedUser.id)) {\n      this.getMessages();\n    }\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (state.selectedUser === null || state.selectedUser.id !== props.newSelectedUser.id) {\n      return {\n        selectedUser: props.newSelectedUser\n      };\n    }\n    return null;    \n  }\n\n  receiveSocketMessages = (socketResponse) => {\n    const { selectedUser } = this.state;\n      if (selectedUser !== null && selectedUser.id === socketResponse.fromUserId) {\n        this.setState({\n          conversations: [...this.state.conversations, socketResponse]\n        });\n        this.scrollMessageContainer();\n      }\n  }\n\n  getMessages = async () => {\n    try {\n      const { userId, newSelectedUser} = this.props;\n      const messageResponse = await ChatHttpServer.getMessages(userId,newSelectedUser.id);\n      if (!messageResponse.error) {\n        this.setState({\n          conversations: messageResponse.messages,\n        });\n        this.scrollMessageContainer();\n      } else {\n        alert('Unable to fetch messages');\n      }\n      this.setState({\n        messageLoading: false\n      });\n    } catch (error) {\n      this.setState({\n        messageLoading: false\n      });\n    }\n  }\n\n  sendMessage = (event) => {\n    if (event.key === 'Enter') {\n      const message = event.target.value;\n      const { userId, newSelectedUser } = this.props;\n      if (message === '' || message === undefined || message === null) {\n        alert(`Message can't be empty.`);\n      } else if (userId === '') {\n        this.router.navigate(['/']);\n      } else if (newSelectedUser === undefined) {\n        alert(`Select a user to chat.`);\n      } else {\n        this.sendAndUpdateMessages({\n          fromUserId: userId,\n          message: (message).trim(),\n          toUserId: newSelectedUser.id,\n        });\n        event.target.value = '';\n      }\n    }\n  }\n\n  sendAndUpdateMessages(message) {\n    try {\n      ChatSocketServer.sendMessage(message);\n      this.setState({\n        conversations : [...this.state.conversations, message]\n      });\n      this.scrollMessageContainer();\n    } catch (error) {\n      alert(`Can't send your message`);\n    }\n  }\n\n  scrollMessageContainer() {\n    if (this.messageContainer.current !== null) {\n      try {\n        setTimeout(() => {\n          this.messageContainer.current.scrollTop = this.messageContainer.current.scrollHeight;\n        }, 100);\n      } catch (error) {\n        console.warn(error);\n      }\n    }\n  }\n\n  alignMessages(toUserId) {\n    const { userId } = this.props;\n    return userId !== toUserId;\n  }\n  \n  getMessageUI () {\n    return (\n      <ul ref={this.messageContainer} className=\"message-thread\">\n        {\n          this.state.conversations.map( (conversation, index) => \n            <li className={`${this.alignMessages(conversation.toUserId) ? 'align-right' : ''}`} key={index}> {conversation.message} </li>\n          )\n        }\n      </ul>\n    )\n  }\n\n  getInitiateConversationUI() {\n    if (this.props.newSelectedUser !== null) {\n      return (\n        <div className=\"message-thread start-chatting-banner\">\n          <p className=\"heading\">\n            You haven 't chatted with {this.props.newSelectedUser.username} in a while,\n            <span className=\"sub-heading\"> Say Hi.</span>\n          </p>\t\t\t\n        </div>\n      )\n    }    \n  }\n\n  render() {\n    const { messageLoading, selectedUser } = this.state;\n    return (\n      <>\n        <div className={`message-overlay ${!messageLoading ? 'visibility-hidden' : ''}`}>\n          <h3> {selectedUser !== null && selectedUser.username ? 'Loading Messages' : ' Select a User to chat.' }</h3>\n        </div>\n        <div className={`message-wrapper ${messageLoading ? 'visibility-hidden' : ''}`}>\n          <div className=\"message-container\">\n            <div className=\"opposite-user\">\n              Chatting with {this.props.newSelectedUser !== null ? this.props.newSelectedUser.username : '----'}\n            </div>\n            {this.state.conversations.length > 0 ? this.getMessageUI() : this.getInitiateConversationUI()}\n          </div>\n\n          <div className=\"message-typer\">\n            <form>\n              <textarea className=\"message form-control\" placeholder=\"Type and hit Enter\" onKeyPress={this.sendMessage}>\n              </textarea>\n            </form>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Conversation;\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nimport ChatSocketServer from '../../utils/chatSocketServer';\n// import ChatHttpServer from '../../utils/ChatHttpServer';\nimport ChatHttpServer from '../../utils/chatHttpServer';\n// ChatHttpServer\nimport ChatList from './chat-list/ChatList';\nimport Conversation from './conversation/Conversation';\n\nimport './Home.css';\n\nclass Home extends Component { \n  userId = null;\n  state = {\n    isOverlayVisible: true,\n    username: '______',\n    selectedUser: null\n  }\n\n  logout = async () => {\n    try {\n      await ChatHttpServer.removeLS();\n      ChatSocketServer.logout({\n        userId: this.userId\n      });\n      ChatSocketServer.eventEmitter.on('logout-response', (loggedOut) => {\n        this.props.history.push(`/`);\n      });\n    } catch (error) {\n      console.log(error);\n      alert(' This App is Broken, we are working on it. try after some time.');\n      throw error;\n    }\n  }\n\n  setRenderLoadingState = (loadingState) => {\n    this.setState({\n      isOverlayVisible: loadingState\n    });\n  }\n\n  async componentDidMount() {\n    try {\n      this.setRenderLoadingState(true);\n      this.userId = await ChatHttpServer.getUserId();\n      const response = await ChatHttpServer.userSessionCheck(this.userId);\n      if (response.error) {\n        this.props.history.push(`/`)\n      } else {\n        this.setState({\n          username: response.username\n        });\n        ChatHttpServer.setLS('username', response.username);\n        ChatSocketServer.establishSocketConnection(this.userId);\n      }\n      this.setRenderLoadingState(false);\n    } catch (error) {\n      this.setRenderLoadingState(false);\n      this.props.history.push(`/`)\n    }\n  }\n\n  updateSelectedUser = (user) => {\n    this.setState({\n      selectedUser: user\n    });\n  }\n\n  getChatListComponent() {\n    return this.state.isOverlayVisible ? null : <ChatList userId={this.userId} updateSelectedUser={this.updateSelectedUser}/>\n  }\n\n  getChatBoxComponent = () => {\n    return this.state.isOverlayVisible ? null : <Conversation userId={this.userId} newSelectedUser={this.state.selectedUser}/>\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className = {`${this.state.isOverlayVisible ? 'overlay': 'visibility-hidden' } `}>\n          <h1>Loading</h1>\n        </div>\n        <header className=\"app-header\">\n          <nav className=\"navbar navbar-expand-md\">\n            <h4>Hello {this.state.username} </h4>\n          </nav>\n          <ul className=\"nav justify-content-end\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#\" onClick={this.logout}>Logout</a>\n            </li>\n          </ul>\n        </header>\n\n        <main role=\"main\" className=\"container content\" >\n          <div className=\"row chat-content\">\n            <div className=\"col-3 chat-list-container\">\n              {this.getChatListComponent()}\n            </div>\n            <div className=\"col-8 message-container\">\n              {this.getChatBoxComponent()}\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Home)\n","import React, { Component } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport { withRouter } from 'react-router-dom';\n\nimport ChatHttpServer from '../../../utils/chatHttpServer';\nimport './Login.css';\n\nclass Login extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: ''\n    };\n  }\n\n  handleLogin = async (event) => {\n    event.preventDefault();\n    this.props.loadingState(true);\n    try {\n      const response = await ChatHttpServer.login(this.state);\n      this.props.loadingState(false);\n      if(response.error) {\n        alert('Invalid login details')\n      } else {\n        ChatHttpServer.setLS('userid', response.userId);\n        this.props.history.push(`/home`)\n      }\n    } catch (error) {\n      this.props.loadingState(false);\n      alert('Invalid login details')\n    }\n  }\n\n  handleInputChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  render() {\n    return (\n      <Form className=\"auth-form\">\n        <Form.Group controlId=\"loginUsername\">\n          <Form.Control \n            type = \"text\"\n            name = \"username\"\n            placeholder = \"Enter username\"\n            onChange = {\n              this.handleInputChange\n            }\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"loginPassword\">\n          <Form.Control \n          type = \"password\"\n          name = \"password\"\n          placeholder = \"Password\"\n          onChange = {\n            this.handleInputChange\n          }\n          />\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\" onClick={this.handleLogin}>\n          Login\n        </Button>\n      </Form>\n    );\n  }\n}\n\nexport default withRouter(Login)\n","import React, { Component } from 'react';\nimport { Alert, Form, Button } from 'react-bootstrap';\nimport { withRouter } from 'react-router-dom';\nimport { DebounceInput } from 'react-debounce-input';\n\nimport ChatHttpServer from '../../../utils/chatHttpServer';\nimport './Registration.css';\n\nclass Registration extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      usernameAvailable: true\n    };\n  }\n\n  handleRegistration = async (event) => {\n    event.preventDefault();\n    this.props.loadingState(true);\n    try {\n      const response = await ChatHttpServer.register(this.state);\n      this.props.loadingState(false);\n      if (response.error) {\n        alert('Unable to register, try after some time.')\n      } else {\n        ChatHttpServer.setLS('userid', response.userId);\n        this.props.history.push(`/home`);\n      }\n    } catch (error) {\n      this.props.loadingState(false);\n      alert('Unable to register, try after some time.')\n    }\n  }\n\n  checkUsernameAvailability = async (event)  => {\n    if(event.target.value !== '' && event.target.value !== undefined) {\n      this.setState({\n        username: event.target.value\n      });\n      this.props.loadingState(true);\n      try {\n        const response = await ChatHttpServer.checkUsernameAvailability(this.state.username);\n        this.props.loadingState(false);\n        if(response.error) {\n          this.setState({\n            usernameAvailable: false\n          });\n        } else {\n          this.setState({\n            usernameAvailable: true\n          });\n        }\n      } catch (error) {\n        this.props.loadingState(false);\n        this.setState({\n          usernameAvailable: false\n        });\n      }\n    } else if (event.target.value === '') {\n      this.setState({\n        usernameAvailable: true\n      });\n    }  \n  }\n\n  handleInputChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  render() {\n    return (\n      <Form className=\"auth-form\">\n        <Form.Group controlId=\"formUsername\">\n          <DebounceInput\n            className=\"form-control\"\n            placeholder = \"Enter username\"\n            minLength={2}\n            debounceTimeout={300}\n            onChange={this.checkUsernameAvailability} />\n          <Alert className={{\n            'username-availability-warning' : true,\n            'visibility-hidden': this.state.usernameAvailable\n          }}  variant=\"danger\">\n            <strong>{this.state.username}</strong> is already taken, try another username.\n          </Alert>\n        </Form.Group>\n\n        <Form.Group controlId=\"formPassword\">\n          <Form.Control \n            type = \"password\"\n            name = \"password\"\n            placeholder = \"Password\"\n            onChange = {\n              this.handleInputChange\n            }\n          />\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\" onClick={this.handleRegistration}>\n          Registration\n        </Button>\n      </Form>\n    );\n  }\n}\n\nexport default withRouter(Registration)\n","import React from 'react'\r\n  \r\n\r\nconst Landing = () => { \r\n    return (\r\n        <React.Fragment>\r\n            <div class=\"overlay\"></div>\r\n            <main style={{height:'100vh'}}>\r\n                <div class=\"frame\">\r\n                    <div class=\"frame__title-wrap\">\r\n                        <h1 class=\"frame__title\">\r\n\r\n                        </h1>\r\n                    </div> \r\n        </div>\r\n            </main>\r\n            <section class=\"animationbg\" id=\"sec02\">\r\n\r\n            </section>\r\n            <section class=\"video\" id=\"vid01\">\r\n                <div class=\"text2\">\r\n                    <h2>Video will crush it</h2>\r\n                </div>\r\n            </section>\r\n            <section class=\"animationbg\" id=\"sec03\">\r\n                <div class=\"text\">\r\n                    <h2>We help Medical and Pharmaceutical Sales teams explain complex medical and diagnostic solutions by\r\n                building remote sales presentations like this one that work in the new world. </h2>\r\n                </div>\r\n            </section>\r\n            <section class=\"video\" id=\"vid02\">\r\n                <div class=\"text2\">\r\n                    <h2>Video will crush it</h2>\r\n                </div>\r\n            </section>\r\n            <section class=\"animationbg\" id=\"sec04\">\r\n                <div class=\"text\">\r\n                    <h2>Know when your prospect is looking.</h2>\r\n                </div>\r\n            </section>\r\n            <section class=\"video\" id=\"vid03\">\r\n                <div class=\"text2\">\r\n                    <h2>2</h2>\r\n                </div>\r\n            </section>\r\n            <section class=\"animationbg\" id=\"sec05\">\r\n                <div class=\"text\">\r\n                    <h2>zoom is dead, it is time to create a quick modern experience\".</h2>\r\n                </div>\r\n            </section>\r\n            <section class=\"video\" id=\"vid04\">\r\n                {/* < autoplay muted loop id=\"myVideo\">\r\n                    <source src=\"GIPHYS/rain.mp4\" type=\"video/mp4\">\r\n                <video> */}\r\n                    <div class=\"text2\">\r\n                        <h2>3</h2>\r\n                    </div>\r\n    </section>\r\n                <section class=\"animationbg\" id=\"sec06\">\r\n                    <div class=\"text\">\r\n                        <h2>zoom is dead, it is time to create a quick modern experience\".</h2>\r\n                    </div>\r\n                </section>\r\n \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Landing\r\n","import React, { Component } from 'react';\r\nimport {Tabs, Tab} from 'react-bootstrap'\r\n\r\nimport Login from './login/Login';\r\nimport Registration from './registration/Registration';\r\n\r\nimport './auth.css';\r\n \r\nimport Landing from './Landing';\r\n\r\nclass NewHome extends Component {\r\n  state = {\r\n    loadingState: false\r\n  }\r\n\r\n  setRenderLoadingState = (loadingState) => {\r\n    this.setState({\r\n      loadingState: loadingState\r\n    });\r\n  } \r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n\r\n        <Landing /> \r\n       <div className=\"container\">\r\n        <div className = {`overlay auth-loading ${this.state.loadingState ? '' : 'visibility-hidden'}`}>\r\n          <h1>Loading</h1>\r\n        </div>\r\n        <div className=\"authentication-screen\">\r\n          <Tabs variant=\"pills\" defaultActiveKey = \"login\" >\r\n            <Tab eventKey=\"login\" title=\"Login\">\r\n              <Login loadingState={this.setRenderLoadingState}/>\r\n            </Tab>\r\n            <Tab eventKey=\"registration\" title=\"Registration\">\r\n              <Registration loadingState={this.setRenderLoadingState}/>\r\n            </Tab>\r\n          </Tabs>\r\n        </div>\r\n      </div></React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewHome;\r\n","/*\n * Real time private chatting app using React, Nodejs, mongodb and Socket.io\n * @author Shashank Tiwari\n */\n\nimport React, { Component } from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from \"react-router-dom\";\n\n// import Authentication from './pages/authentication/Authentication';\nimport Home from './pages/home/Home';\nimport NewHome from './pages/newHome/NewHome';\nimport NotFound from './pages/not-found/NotFound';\n\nimport './App.css';\n\nclass App extends Component {\n  componentDidMount() {\n    const body = document.querySelector('body')\n\n    // vendor\n    const vendor = document.createElement('script')\n    vendor.async = false\n    vendor.src = '/JS/vendors.js'\n    body.appendChild(vendor)\n\n    //index\n    const index = document.createElement('script')\n    index.async = false\n    index.src = '/JS/index.js'\n    body.appendChild(index)\n    \n    //gsap \n    const gsap = document.createElement('script')\n    gsap.async = false\n    gsap.src = 'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.5.1/gsap.min.js'\n    body.appendChild(gsap)\n    \n    //scrollTrigges\n    const scrollTrigger = document.createElement('script')\n    scrollTrigger.async = false\n    scrollTrigger.src = 'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.5.1/ScrollTrigger.min.js'\n    body.appendChild(scrollTrigger)\n    \n    // lottie\n    const lottie = document.createElement('script')\n    lottie.async = false\n    lottie.src = '/JS/lottie.js'\n    body.appendChild(lottie)\n    \n    //scrolllottie\n    const scrollLottie = document.createElement('script')\n    scrollLottie.async = false\n    scrollLottie.src = '/JS/ScrollLottie.js'\n    body.appendChild(scrollLottie)\n\n    //register plugin \n      const registerPlugin = document.createElement('script')\n      registerPlugin.async = false\n      registerPlugin.src = 'JS/register.js'\n      body.appendChild(registerPlugin)\n\n\n\n    // //register plugin\n    // gsap.registerPlugin(ScrollTrigger); \n    // ScrollLottie({\n    //     target: '#sec02',\n    //     path: 'https://assets3.lottiefiles.com/private_files/lf30_P9kQz3.json',\n    //     duration: 8,\n    //     speed: 'slow'\n    // })\n    // ScrollLottie({\n    //     target: '#sec03',\n    //     path: 'https://assets4.lottiefiles.com/packages/lf20_IaX52r.json',\n    //     duration: 4,\n    //     speed: 'medium'\n    // })\n    // ScrollLottie({\n    //     target: '#sec04',\n    //     path: 'https://assets2.lottiefiles.com/packages/lf20_QdVQmS.json',\n    //     duration: 4,\n    //     speed: 'medium'\n    // })\n    // ScrollLottie({\n    //     target: '#sec05',\n    //     path: 'https://assets4.lottiefiles.com/private_files/lf30_lKuCPz.json',\n    //     duration: 4,\n    //     speed: 'medium'\n    // })\n  \n  }\n  render() {\n    return (\n      <React.Fragment>\n        <NewHome />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","\nimport React, { Component } from 'react';\nimport './NotFound.css';\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        NotFound Component\n      </div>\n    );\n  }\n}\n\nexport default NotFound;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}